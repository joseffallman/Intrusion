call compile preprocessFileLineNumbers "Client\Classes\Objects\Tutorial.sqx";
call compile preprocessFileLineNumbers "Client\Classes\Configs\TutorialConfig.sqx";
call compile preprocessFileLineNumbers "Client\Classes\Dialogs\TutorialDialog.sqx";
call compile preprocessFileLineNumbers "Client\Classes\Dialogs\ProfessionDialog.sqx";
call compile preprocessFileLineNumbers "Client\Classes\Handlers\TutorialHandler.sqx";
call compile preprocessFileLineNumbers "Client\Classes\Handlers\BriefingHandler.sqx";
call compile preprocessFileLineNumbers "Client\Classes\Handlers\GroupActionHandler.sqx";
call compile preprocessFileLineNumbers "Client\Classes\Handlers\ClientMessageHandler.sqx";
call compile preprocessFileLineNumbers "Client\Classes\Handlers\IntrusionMenuHandler.sqx";
call compile preprocessFileLineNumbers "Client\Classes\Handlers\ClientResourceLocationHandler.sqx";
call compile preprocessFileLineNumbers "Client\Classes\Handlers\ClientSquadHandler.sqx";
call compile preprocessFileLineNumbers "Client\Classes\Handlers\MapObservationsHandler.sqx";
call compile preprocessFileLineNumbers "Client\Classes\Handlers\MissionEndHandler.sqx";
call compile preprocessFileLineNumbers "Client\Classes\Handlers\RadioTriggerHandler.sqx";
call compile preprocessFileLineNumbers "Client\Classes\Handlers\ClientVehicleHandler.sqx";
call compile preprocessFileLineNumbers "Client\Classes\Services\MapMarkerService.sqx";
call compile preprocessFileLineNumbers "Client\Classes\Services\JipService.sqx";
call compile preprocessFileLineNumbers "Client\ClientEventHandlers.sqx";

using Intrusion.Client;

waitUntil { player == player };

// Configs
call TutorialConfig.Init;

// Handlers
call TutorialHandler.Init;
call RadioTriggerHandler.Init;
call IntrusionMenuHandler.Init; // Adds the intrusion menu
call ClientResourceLocationHandler.Init; // Initialize actions on all flags
[gCommonConfig.Professions] call MapObservationsHandler.Init;
[gCommonConfig.Professions] call ClientSquadHandler.Init;

// Services
[gCommonConfig.MapMarkers, gCommonConfig.Professions] call MapMarkerService.Init;

// Dialogs
[gCommonConfig.Professions] call ProfessionDialog.Init;

// Create the briefing
call BriefingHandler.CreateBriefing;

// Add invite player actions on all possible players
call GroupActionHandler.ResetInvitePlayerActions;

// Start the map marker service
call MapMarkerService.RunAsync;

if (didJIP) then {
	// Perform JIP stuff
	[gCommonConfig.MapMarkers] call JipService.StartAsync;
}
else {
	// Show the Welcome tutorial
	[TutorialType.Welcome] call TutorialHandler.ShowTutorial;
};
