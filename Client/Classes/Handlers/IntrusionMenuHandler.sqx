/*
 * Name:    IntrusionMenuHandler
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Encapsulates all logic for the Intrusion Menu.
 */

using Intrusion.Common;
using Intrusion.Communication;

namespace Intrusion.Client
{
	public class IntrusionMenuHandler
	{
        // Initializes the Intrusion Menu for the player and adds the "Open Intrusion Menu" action.
        public static method Init {
        	call _self.UpdateVisibleOptions;
			call _self.BuildIntrusionMenu;
			
			call _self.ShowAction;
		};
		
		public static method ShowAction()
		{
			player addAction ["<t color='#AAAAFF'>Open Intrusion Menu</t>", { call IntrusionMenuHandler.Open; }];
		};
		
		#region Option Properties
		
		public static property Boolean OptionLeaveGroupVisible { get; private set; };
		
		public static property Boolean OptionClaimBrigadeLeadershipVisible { get; private set; };
		
		public static property Boolean OptionQuitBrigadeLeadershipVisible { get; private set; };
		
		public static property Boolean OptionMoveBaseVisible { get; private set; };
		
		public static property Boolean OptionBeamToBaseVisible { get; private set; };
		
		public static property Boolean OptionSelectProfessionVisible { get; private set; };
		
		public static property Boolean OptionGiveOrderVisible { get; private set; };
		
		#endregion
		
		#region Show Methods
		
		private static method ShowOptionLeaveGroup("_show" as Boolean)
		{
			if (_show != _self.OptionLeaveGroupVisible) then {
				_self.OptionLeaveGroupVisible = _show;
				call _self.BuildIntrusionMenu;
			};
		};
		
		private static method ShowOptionClaimBrigadeLeadership("_show" as Boolean)
		{
			if (!(_show isEqualTo _self.OptionClaimBrigadeLeadershipVisible)) then {
				_self.OptionClaimBrigadeLeadershipVisible = _show;
				call _self.BuildIntrusionMenu;
			};
		};
		
		private static method ShowOptionQuitBrigadeLeadership("_show" as Boolean)
		{
			if (!(_show isEqualTo _self.OptionQuitBrigadeLeadershipVisible)) then {
				_self.OptionQuitBrigadeLeadershipVisible = _show;
				call _self.BuildIntrusionMenu;
			};
		};
		
		private static method ShowOptionMoveBase("_show" as Boolean)
		{
			if (!(_show isEqualTo _self.OptionMoveBaseVisible)) then {
				_self.OptionMoveBaseVisible = _show;
				call _self.BuildIntrusionMenu;
			};
		};

		private static method ShowOptionBeamToBase("_show" as Boolean)
		{
			if (!(_show isEqualTo _self.OptionBeamToBaseVisible)) then {
				_self.OptionBeamToBaseVisible = _show;
				call _self.BuildIntrusionMenu;
			};
		};

		private static method ShowOptionSelectProfession("_show" as Boolean)
		{
			if (!(_show isEqualTo _self.OptionSelectProfessionVisible)) then {
				_self.OptionSelectProfessionVisible = _show;
				call _self.BuildIntrusionMenu;
			};
		};

		private static method ShowOptionGiveOrder("_show" as Boolean)
		{
			if (!(_show isEqualTo _self.OptionGiveOrderVisible)) then {
				_self.OptionGiveOrderVisible = _show;
				call _self.BuildIntrusionMenu;
			};
		};

		#endregion
		
		#region Methods
		
		public static method UpdateVisibleOptions()
		{
			private ["_playerInfoCollection" as PlayerInfoCollection, "_optionClaimBrigadeLeadershipVisible" as Boolean];
			
			_optionClaimBrigadeLeadershipVisible = true;
			if (call PublicVariableHandler.PlayerInfoCollectionHasValue) then {
				_playerInfoCollection = call PublicVariableHandler.GetPlayerInfoCollection;
				_optionClaimBrigadeLeadershipVisible = !([playerSide] call _playerInfoCollection.SideHasBrigadeLeader);
			};
			
			_self.OptionLeaveGroupVisible = leader group player != player;
			_self.OptionClaimBrigadeLeadershipVisible = _optionClaimBrigadeLeadershipVisible;
			_self.OptionQuitBrigadeLeadershipVisible = ClientState.IsBrigadeLeader;
			_self.OptionMoveBaseVisible = ClientState.IsBrigadeLeader;
			_self.OptionBeamToBaseVisible = leader group player == player;
			_self.OptionSelectProfessionVisible = leader group player == player;
			_self.OptionGiveOrderVisible = ClientState.IsBrigadeLeader;
			
			call _self.BuildIntrusionMenu;
		};
		
		private static method BuildIntrusionMenu()
		{
			INT_IntrusionMenu = 
			[
			  ["Intrusion Menu", true]
			];
			
			if (_self.OptionSelectProfessionVisible) then {
				INT_IntrusionMenu pushBack ["Set group's profession", [0], "", -5, [["expression", "call Intrusion_Client_IntrusionMenuHandler_OnSelectProfession"]], "1", "1"];
			};
			
			if (_self.OptionLeaveGroupVisible) then {
				INT_IntrusionMenu pushBack ["Leave group", [0], "", -5, [["expression", "call Intrusion_Client_IntrusionMenuHandler_OnLeaveGroup"]], "1", "1-IsLeader"];
			};
			
			if (_self.OptionClaimBrigadeLeadershipVisible) then {
				INT_IntrusionMenu pushBack ["Claim brigade leadership", [0], "", -5, [["expression", "call Intrusion_Client_IntrusionMenuHandler_OnClaimBrigadeLeadership"]], "1", "1"];
			};
			
			if (_self.OptionQuitBrigadeLeadershipVisible) then {
				INT_IntrusionMenu pushBack ["Quit brigade leadership", [0], "", -5, [["expression", "call Intrusion_Client_IntrusionMenuHandler_OnQuitBrigadeLeadership"]], "1", "1"];
			};
			
			if (_self.OptionMoveBaseVisible) then {
				INT_IntrusionMenu pushBack ["Move base", [0], "", -5, [["expression", "call Intrusion_Client_IntrusionMenuHandler_OnMoveBase"]], "1", "1"];
			};
			
			if (_self.OptionBeamToBaseVisible) then {
				INT_IntrusionMenu pushBack ["Beam to base", [0], "", -5, [["expression", "call Intrusion_Client_IntrusionMenuHandler_OnBeamToBase"]], "1", "1"];
			};
			
			if (_self.OptionGiveOrderVisible) then {
				INT_IntrusionMenu pushBack ["Give order", [0], "", -5, [["expression", "call Intrusion_Client_IntrusionMenuHandler_OnGiveOrder"]], "1", "1"];
			};
		};
		
		// Opens the Intrusion menu for the current player.
		public static method Open {
			showCommandingMenu "#USER:INT_IntrusionMenu";
		};
		
		#endregion
		
		#region Option Event Handlers
		
		// Called when the local player selects the "Leave Group" option.
		private static method OnLeaveGroup {
			private ["_oldGroup" as Group];
			
			_oldGroup = group player;
			[player] joinSilent grpNull;
			
			["ClientEventReciever.OnPlayerLeftGroup", [player, _oldGroup]] call Remote.Invoke;
		};
		
		// Called when the local player selects the "Claim Brigade Leadership" option.
		private static method OnClaimBrigadeLeadership {
			["ServerEventReciever.OnPlayerClaimBrigadeLeadership", [getPlayerUID player, playerSide]] call Remote.Invoke;
		};
		
		// Called when the local player selects the "Quit Brigade Leadership" option.
		private static method OnQuitBrigadeLeadership {
			["ServerEventReciever.OnPlayerQuitBrigadeLeadership", [getPlayerUID player]] call Remote.Invoke;
		};
		
		private static method OnBeamToBase {
			if (call gClient.TeleportHandler.CheckOkToTeleport) then {
				["ClientEventReciever.OnGroupTeleportingToBase", [group player]] call Remote.Invoke;
			};
		};
		
		// Called when the local player selects the "Move Base" option.
		private static method OnMoveBase {
			spawn MoveBaseDialog.ShowDialog;
		};
		
		// Called when the local player selects the "Move Base" option.
		private static method OnSelectProfession {
			spawn ProfessionDialog.ShowDialog;
		};
		
		// Called when the local brigade leader selects the "Give Order" option.
		private static method OnGiveOrder {
			if (!gClient.GiveOrderService.IsRunning) then {
				call gClient.GiveOrderService.RunAsync;
			};
		};
		
		#endregion
	};
};
