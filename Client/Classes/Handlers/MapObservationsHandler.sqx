/*
 * Name:	MapObservationsHandler
 * Date:	2018-01-22
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Handles all map markers for the player on the current client.
 */

using Intrusion.Common;
using Intrusion.Communication;
 
namespace Intrusion.Client
{
	public class MapObservationsHandler
	{
		private static fields ["_mMapObservationIds" as Array /* as Scalar */, "_mProfessionConfig" as IProfessionConfig];

		// Initializes the MapObservationsHandler.
		public static method Init("_professionConfig" as IProfessionConfig)
		{
			_mProfessionConfig = _professionConfig;
			_mMapObservationIds = [];
		};
		
		// Adds an observation marker to the map.
		// _mapObservation (MapObservation): The map observation to draw a marker for.
		private static method AddMarker("_mapObservation" as MapObservation)
		{
			private ["_name" as String, "_color" as String, "_markerType" as String, "_profession" as Profession];
			
			_name = "INT_MapObservationMarker_" + str _mapObservation.Id;
			
			createMarkerLocal [_name, _mapObservation.PercievedPos];
			
			_color = "ColorGrey";
			_markerType = "n_unknown";
			if (_mapObservation.IsIdentifiedAsEnemy) then {
				_profession = [_mapObservation.PercievedProfessionType] call _mProfessionConfig.GetProfession;
				
				_markerType = "o_unknown";
				if (!isNull _profession) then {
					_markerType = _profession.MarkerTypeEnemy;
				};
			
				if (!_mapObservation.IsPercieved) then {
					_color = "ColorRed";
				};
			};
				
			_name setMarkerColorLocal _color;
			_name setMarkerTypeLocal _markerType;
		};
		
		// Updates an existing observation marker on the map.
		// _mapObservation (MapObservation): The map observation marker to update its marker for.
		private static method UpdateMarker("_mapObservation" as MapObservation)
		{
			private ["_name" as String, "_color" as String, "_markerType" as String, "_profession" as Profession];
			
			_name = "INT_MapObservationMarker_" + str _mapObservation.Id;
			
			_name setMarkerPosLocal _mapObservation.PercievedPos;
			
			_color = "ColorGrey";
			_markerType = "n_unknown";
			if (_mapObservation.IsIdentifiedAsEnemy) then {
				_profession = [_mapObservation.PercievedProfessionType] call _mProfessionConfig.GetProfession;
				
				_markerType = "o_unknown";
				if (!isNull _profession) then {
					_markerType = _profession.MarkerTypeEnemy;
				};
			
				if (!_mapObservation.IsPercieved) then {
					_color = "ColorRed";
				};
			};
			
			_name setMarkerColorLocal _color;
			_name setMarkerTypeLocal _markerType;
		};
		
		// Deletes an observation marker on the map.
		// _mapObservationId (Scalar): The ID for the map observation marker to delete.
		private static method DeleteMarker("_mapObservationId" as Scalar)
		{
			private ["_name" as String];
			
			_name = "INT_MapObservationMarker_" + str _mapObservationId;
			
			deleteMarker _name;
		};
		
		// Updates all map observations on the map.
		// _mapObservations (Array): All current mapobservations.
		public static method UpdateMap("_mapObservations" as Array)
		{
			private ["_newMapObservationIds" as Array, "_mapObservation" as MapObservation, "_id" as Scalar];
			
			_newMapObservationIds = [];
			
			// Add markers that do not already exist on the map
			{
				_mapObservation = _x;
				
				if (_mapObservation.ObservingSide == playerSide) then {
					if (!(_mapObservation.Id in _mMapObservationIds)) then {
						[_mapObservation] call MapObservationsHandler.AddMarker;
						_mMapObservationIds pushBack _mapObservation.Id;
					}
					else { // Update the others
						[_mapObservation] call MapObservationsHandler.UpdateMarker;
					};
					
					_newMapObservationIds pushBack _mapObservation.Id;
				};
			} foreach _mapObservations as MapObservation;
			
			// Remove markers that no lonoger exist as observations
			{
				_id = _x;
				
				if (!(_id in _newMapObservationIds)) then {
					[_id] call MapObservationsHandler.DeleteMarker;
				};
			} foreach _mMapObservationIds as Scalar;
			
			_mMapObservationIds = _newMapObservationIds;
		};
	};
};
