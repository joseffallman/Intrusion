/*
 * Name:    GroupActionHandler
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Handles everything about grouping action for the current client.
 */

using Intrusion.Common;
using Intrusion.Communication;

namespace Intrusion.Client
{
	public class GroupActionHandler
	{
		private static fields ["_mProfessionConfig" as IProfessionConfig];
		
		public static method Init("_professionConfig" as IProfessionConfig)
		{
			_mProfessionConfig = _professionConfig;
		};
	
        // Adds 'Invite player to group' actions to every single member group leader.
        public static method UpdateAllInvitePlayerActions()
        {
        	private ["_playableUnits" as Array];
        	
        	_playableUnits = [switchableUnits, playableUnits] select isMultiplayer;
        	
            {
            	// If the player is not the unit itself
            	if (_x != player) then {
	            	removeAllActions _x;

	            	// If the players' side are the same
	            	if (side group _x == side group player) then {
	            	
		            	// If the player is not already in a group
		            	if (count units group _x == 1) then {
			            	_x addAction ["Invite player to group", { [_this select 0] call _self.InviteOtherPlayerToGroup; }];
		            	};
	            	};
	            };
            } foreach _playableUnits;
            
            call IntrusionMenuHandler.UpdateVisibleOptions;
		};
		
		// Invites another player to the local player's group.
		private static method InviteOtherPlayerToGroup("_otherPlayer" as Object)
		{
			private ["_previousGroup" as Group, "_squadCollection" as SquadCollection, "_mySquad" as Squad, "_profession" as Profession, "_maxPlayers" as Scalar];
			
			_maxPlayers = 0;
			_squadCollection = call PublicVariableHandler.GetSquads;
			_mySquad = [group player] call _squadCollection.GetSquadByGroup;
			
			if (!isNull _mySquad) then {
				_profession = [_mySquad.ProfessionType] call _mProfessionConfig.GetProfession;
				_maxPlayers = _profession.MaxGroupSize;
			};
			
			if (_maxPlayers == 0 || count units group player < _maxPlayers) then {
				// Add the other player to the local player's group
				_previousGroup = group _otherPlayer;
				[_otherPlayer] join player;
				
				["ClientEventReciever.OnPlayerJoinedGroup", [_otherPlayer, _previousGroup, group player]] call Remote.Invoke;
				["ServerEventReciever.OnPlayerJoinedGroup", [_otherPlayer, _previousGroup, group player]] call Remote.Invoke;
			}
			else {
				["You cannot invite " + name _otherPlayer + " since your profession allows for a maximum of " + str _maxPlayers + " players.", player] call ClientMessageHandler.ShowMessage;
			};
		};
		
		// Called when any player leaves a group.
		public static method OnPlayerLeavingGroup {
			call _self.UpdateAllInvitePlayerActions;
		};
	};
};
