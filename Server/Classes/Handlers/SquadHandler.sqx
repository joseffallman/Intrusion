/*
 * Name:	SquadHandler
 * Date:	2017-11-30
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Handles all about groups on the server.
 */

using Intrusion.Common;
using Intrusion.Communication;

namespace Intrusion.Server
{
	public class SquadHandler : ISquadHandler
	{
		private fields ["_mSquadCollection" as SquadCollection, "_mVehicleSpawner" as IVehicleSpawner];
		private static fields ["_mProfessionChangeListeners" as Array /* of Code */, "_mProfessionConfig" as IProfessionConfig];
		
		// Creates a SquadHandler object.
		public constructor("_vehicleSpawner" as IVehicleSpawner, "_professionConfig" as IProfessionConfig) {
			_mVehicleSpawner = _vehicleSpawner;
			_mSquadCollection = new SquadCollection;
			_mProfessionChangeListeners = [];
			_mProfessionConfig = _professionConfig;
			
			[_mSquadCollection] call PublicVariableHandler.BroadcastSquads;
		};
		
		// Gets a group by its leader.
		// _leader: The player object whose group to find.
		// Returns: A player group. classNull if no group was found.
		public method Squad GetGroupByLeader("_leader" as Object)
		{
			private "_foundSquad" as Squad;
			
			scopeName "main";
			_foundSquad = classNull;
			
			{
				_x = _x as Squad;
				if (leader _x.Group == _leader) then {
					_foundSquad = _x;
					breakTo "main";
				};
			} foreach _mSquadCollection as Squad;
			
			_foundSquad
		};
		
		// Registers a group change profession listener to the list of listeners.
		// _listener (IGroupChangingProfessionListener): The object that will listen.
		public static method RegisterGroupChangingProfessionListener("_listener" as IGroupChangingProfessionListener)
		{
			_mProfessionChangeListeners pushBack _listener;
		};
		
		// Sets a group's profession to the public variable property.
		// This function aquires a lock during runtime.
		// _group (Group): The group to change profession.
		// _professionName (String): The name of the new profession.
		public method SetSquadProfession("_group" as Group, "_professionType" as ProfessionType)
		{
			private ["_squad" as Squad, "_profession" as Profession];

			scopeName "main";

			// Check if profession type is available (if not all taken by other squads).
			if (!([side _group, _professionType] call _mSquadCollection.ProfessionTypeAvailable)) then {
				["ClientSquadHandler.OnGroupProfessionChangeRejected", [_group, "Profession is already occupied."]] call Remote.Invoke;
				breakOut "main";
			};
			
			_profession = [_professionType] call _mProfessionConfig.GetProfession;
			
			if (count units _group < _profession.MinGroupSize) then {
				["ClientSquadHandler.OnGroupProfessionChangeRejected", [_group, "Your gruop is two small. You will need no less than " + str _profession.MinGroupSize + " members to play this profession."]] call Remote.Invoke;
				breakOut "main";
			};
			
			if (count units _group > _profession.MaxGroupSize) then {
				["ClientSquadHandler.OnGroupProfessionChangeRejected", [_group, "Too many in your group. You will need no more than " + str _profession.MaxGroupSize + " members to play this profession."]] call Remote.Invoke;
				breakOut "main";
			};
			
			// All clear, set the profession!

			call _mSquadCollection.AquireLock;
			
			_squad = [_group, _professionType] new Squad;
			[_squad] call _mSquadCollection.AddOrUpdateSquad;
			
			call _self.RemoveEmptySquads;
			
			// Notify all local group change profession listeners of the current side.
			{
				if (_x.Side == side _group) then {
					[_group, _professionType] call _x.OnGroupChangingProfession;
				};
			} foreach _mProfessionChangeListeners as IGroupChangingProfessionListener;
			
			[_mSquadCollection] call PublicVariableHandler.BroadcastSquads;
			
			// Tell the clients about the change
			["ClientSquadHandler.OnGroupProfessionChanged", [_group, _professionType]] call Remote.Invoke;
			
			call _mSquadCollection.ReleaseLock;
		};
		
		// Gets a squad by group.
		// _group (Group): The group to get the squad for.
		// Returns (Squad): The squad if it is found. Otherwise classNull.
		public method Squad GetSquadByGroup("_group" as Group)
		{
			scopeName "main";
			
			{
				private ["_squad" as Squad];
				_squad = _x as Squad;
				
				if (_squad.Group == _group) then {
					_squad breakOut "main";
				};
			} foreach (_mSquadCollection.Squads) as Squad;
			
			classNull
		};
		
		public method RemoveEmptySquads()
		{
			private ["_removedSquads" as Array /* of Squad */];
			
			_removedSquads = call _mSquadCollection.RemoveEmptySquads;
			
			{
				[_x.Group] call _mVehicleSpawner.DeleteProfessionVehicles;
			} foreach _removedSquads as Squad;
		};
	};
};
