/*
 * Name:	FreeWeaponsService
 * Date:	2018-09-03
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Handles the assignment of weapons for all sides.
 */

using Intrusion.Common;

namespace Intrusion.Server
{
	public class WeaponsService
	{
		private static fields ["_mWeaponBoxes" as Array /* of WeaponBox */];
		
		public static method Init {
			_mWeaponBoxes = [];
		};
		
		private static method WeaponBox GetWeaponBox {
			params ["_side" as Side, "_weaponBoxType" as WeaponBoxType];
			
			scopeName "main";
			
			{
				if (_x.Side == _side && _x.Type == _weaponBoxType) then {
					_x breakOut "main";
				}
			} foreach _mWeaponBoxes as WeaponBox;
			
			classNull
		};
		
		private static method AddWeaponBox {
			params ["_weaponBox" as WeaponBox];
			private ["_existingWeaponBox" as WeaponBox];
		
			scopeName "main";
			
			for "_i" from 0 to (count _mWeaponBoxes - 1) do {
				_existingWeaponBox = _mWeaponBoxes select _i;
				
				if (_existingWeaponBox.Side == _weaponBox.Side && _existingWeaponBox.Type == _weaponBox.Type) then {
					_mWeaponBoxes set [_i, _weaponBox;];
					breakOut "main";
				};
			};
			
			_mWeaponBoxes pushBack _weaponBox;
		};
		
		// Runs the weapons service.
		private static method Run {
			while { true } do
			{
	        	{
					private ["_side" as Side, "_weaponBox" as WeaponBox, "_markerInfo" as SideMarkerInfo, "_weapon", "_magazines", "_boxAlive"];
					_side = _x;
					
					_markerInfo = [_side] call SideMarkersConfig.GetSideMarkerInfo;
						
					// Create the box if it is not already there
					
					_weaponBox = [_side, WeaponBoxType.Basic] call _self.GetWeaponBox;
					
					if (isNull _weaponBox || { !(call _weaponBox.IsAlive) }) then
					{
						_weaponBox = [_side, getMarkerPos _markerInfo.WeaponDepotMarkerName, WeaponBoxType.Basic] new WeaponBox;
						[_weaponBox] call WeaponsService.AddWeaponBox;
						["Basic weapon box spawned for " + str _side] call LogHandler.Info;
					};
					
					
					// Add weapon boxes
					
					// Basic weapons
					if (!isNull _weaponBox) then
					{
						call _weaponBox.MakeEmpty;
						_weaponBox.Object addWeaponCargoGlobal ["FirstAidKit", 10];
						
						{
							private ["_weaponInfo" as SideWeaponInfo];
							_weaponInfo = _x;
							
							_weaponBox.Object addWeaponCargoGlobal [_weaponInfo.ClassName, 30];
							
							{
								_weaponBox.Object addMagazineCargoGlobal [_x, 300];
							} foreach _weaponInfo.Magazines as String;
						} foreach ([_side, WeaponBoxType.Basic] call WeaponClassNamesConfig.GetWeaponsBySideAndBoxType) as SideWeaponInfo;
					};
	        	} foreach GameplayConfig.CompetingSides as Side;
				
				sleep 60;
			};
		};
	
		// Starts the weapons service.
		public static method RunAsync {
			spawn _self.Run;
		};
	};
};

