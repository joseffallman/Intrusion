/*
 * Name:	FreeWeaponsService
 * Date:	2018-09-03
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Handles the assignment of weapons for all sides.
 */

using Intrusion.Common;

namespace Intrusion.Server
{
	public class WeaponsService
	{
		private static fields ["_mGameplayConfig" as IGameplayConfig, "_mWeaponBoxes" as Array /* of WeaponBox */, "_mMapMarkersConfig" as IMapMarkersConfig, "_mWeaponBoxTypes" as Array /* of WeaponBoxType */];
		
		private static method WeaponBox GetWeaponBox("_side" as Side, "_weaponBoxType" as WeaponBoxType)
		{
			scopeName "main";
			
			{
				if (_x.Side == _side && _x.Type == _weaponBoxType) then {
					_x breakOut "main";
				}
			} foreach _mWeaponBoxes as WeaponBox;
			
			classNull
		};
		
		private static method AddWeaponBox("_weaponBox" as WeaponBox)
		{
			private ["_existingWeaponBox" as WeaponBox];
		
			scopeName "main";
			
			for "_i" from 0 to (count _mWeaponBoxes - 1) do {
				_existingWeaponBox = _mWeaponBoxes select _i;
				
				if (_existingWeaponBox.Side == _weaponBox.Side && _existingWeaponBox.Type == _weaponBox.Type) then {
					_mWeaponBoxes set [_i, _weaponBox;];
					breakOut "main";
				};
			};
			
			_mWeaponBoxes pushBack _weaponBox;
		};
		
		// Runs the weapons service.
		private static method Run()
		{
			private ["_weaponBox" as WeaponBox, "_markerInfo" as MapMarkerInfo, "_weaponBoxInfo" as WeaponBoxInfo, "_weaponBoxInvented" as Boolean];
			
			while { true } do
			{
	        	{
					private ["_side" as Side];
					_side = _x;

					_markerInfo = [_side] call _mMapMarkersConfig.GetMapMarkerInfo;

					// Create the weapon boxes if it is not already there
					
					{
						private ["_weaponBoxType" as WeaponBoxType];
						_weaponBoxType = _x;
						
						_weaponBox = [_side, _weaponBoxType] call _self.GetWeaponBox;
						_weaponBoxInfo = [_weaponBoxType] call WeaponBoxesConfig.GetWeaponBoxInfo;
						_weaponBoxInvented = [_side, _weaponBoxInfo.RequiredTechnology] call Scientist.SideTechnologyIsInvented;

						if (_weaponBoxInvented && (isNull _weaponBox || { !(call _weaponBox.IsAlive) })) then
						{
							_weaponBox = [_side, getMarkerPos _markerInfo.WeaponDepotMarkerName, _weaponBoxType] new WeaponBox;
							[_weaponBox] call WeaponsService.AddWeaponBox;
							["Weapon box spawned for " + str _side] call LogHandler.Info;
						};
					
						// Add weapons to boxes
						if (!isNull _weaponBox) then
						{
							call _weaponBox.MakeEmpty;
							_weaponBox.Object addWeaponCargoGlobal ["FirstAidKit", 10];
							
							{
								private ["_weaponInfo" as WeaponInfo];
								_weaponInfo = _x;
								
								if (_weaponInfo.ClassName != "") then {
									_weaponBox.Object addWeaponCargoGlobal [_weaponInfo.ClassName, 30];
									
									{
										_weaponBox.Object addItemCargoGlobal [_x, 300];
									} foreach _weaponInfo.Magazines as String;
								}
								else {
									{
										_weaponBox.Object addItemCargoGlobal [_x, 300];
									} foreach _weaponInfo.Magazines as String;
								};
								
							} foreach ([_side, _weaponBoxType] call WeaponsConfig.GetWeaponsBySideAndBoxType) as WeaponInfo;
						};
					} foreach _mWeaponBoxTypes as WeaponBoxType;
	        	} foreach _mGameplayConfig.CompetingSides as Side;
				
				sleep 60;
			};
		};
		
		// Starts the weapons service.
		public static method RunAsync("_gameplayConfig" as IGameplayConfig, "_mapMarkersConfig" as IMapMarkersConfig)
		{
			_mWeaponBoxTypes = [
				WeaponBoxType.Basic,
				WeaponBoxType.Grenades,
				WeaponBoxType.Launchers
			];
			
			_mGameplayConfig = _gameplayConfig;
			_mMapMarkersConfig = _mapMarkersConfig;
			_mWeaponBoxes = [];
			
			spawn _self.Run;
		};
	};
};
