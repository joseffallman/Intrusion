/*
 * Name:    MissionEngine
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Executes the mission. Loops through the mission loop that will run from mission start
 * to mission end.
 */

using Intrusion.Common;
using Intrusion.Communication;

namespace Intrusion.Server
{
	public class MissionEngine
	{
		private static fields ["_mServer" as IntrusionServer, "_mServerConfig" as IServerConfig, "_mCommonConfig" as ICommonConfig];
	
		// Initializes and broadcasts the player info collection
		private static method InitPlayerInfoCollection {
			private ["_playerInfoCollection" as PlayerInfoCollection, "_allPlayers" as Array, "_player" as Object];
			
			//sleep 2;
			_playerInfoCollection = new PlayerInfoCollection;
			_allPlayers = call BIS_fnc_listPlayers;
			
			{
				_player = _x;
				[getPlayerUid _player, name _player, side group _player] call _playerInfoCollection.AddPlayerInfo;
			} foreach _allPlayers;
			
			[_playerInfoCollection] call PublicVariableHandler.BroadcastPlayerInfoCollection;
		};

        // Runs the mission.
        private static method Run() {
        	private ["_sideManagers" as Array];
			private ["_resourceReportCollection" as ResourceReportCollection, "_resourceReport" as ResourceReport];
        	
        	// Create collections
        	_resourceReportCollection = new ResourceReportCollection;
        	
        	// Initialize the player info collection
        	call _self.InitPlayerInfoCollection;
        	
        	// Aquire resource collections
        	call ResourceLocationHandler.AquireAllResourceLocations;
			
			if (gCommon.MissionParametersHandler.GuerillaGuardingResourceLocations) then {
				call ResourceLocationHandler.CreateGuerillaUnits;
			};
			
        	// Start the mission counter.
        	[gCommon.MissionParametersHandler.MatchLengthMinutes] call MissionCounterService.RunAsync;
        	
        	// Start the weapon service
        	[_mServerConfig.Gameplay, _mCommonConfig.MapMarkers, gServer.InventedTechnologiesCollection] call WeaponsService.RunAsync;
        	
        	// Start the observation service
        	call ObservationService.RunAsync;
        	
        	// Create a side manager for each side.
        	_sideManagers = [];
    		
        	{
        		_sideManagers pushBack [_mServerConfig, _mCommonConfig, _x, _mServer.VehicleSpawner, gServer.SquadHandler, _mServer.MessageHandler, gServer.InventedTechnologiesCollection, gServer.UnitCounter, gCommonConfig.Professions, gCommon.MissionParametersHandler.MatchLengthMinutes] new SideManager;
        	} foreach _mServerConfig.Gameplay.CompetingSides as Side;
        	
        	// Start the free vehicles service
        	[_mServerConfig.Gameplay, _mServer.VehicleSpawner] call FreeVehiclesService.RunAsync;
        	
			// Perform the mission digest loop
			while { MissionCounterService.MissionIsRunning } do
			{
				{
					private ["_sideManager" as SideManager];
					_sideManager = _x;
					
					_resourceReport = call _sideManager.PerformTurn;
					
					[_resourceReport] call _resourceReportCollection.AddOrUpdateResourceReport;
				} foreach _sideManagers as SideManager;
				
				["ClientEventReciever.OnResourceReportCollectionUpdated", [_resourceReportCollection]] call Remote.Invoke;
				
				sleep 3;
			};
		};
		
		// Starts the mission
		public static method RunAsync("_server" as IntrusionServer, "_serverConfig" as IServerConfig, "_commonConfig" as ICommonConfig)
		{
			_mServer = _server;
			_mServerConfig = _serverConfig;
			_mCommonConfig = _commonConfig;
			
			[] spawn _self.Run;
		};
	};
};
