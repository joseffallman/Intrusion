/*
 * Name:    MissionEngine
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Executes the mission. Loops through the mission loop that will run from mission start
 * to mission end.
 */

using Intrusion.Common;

namespace Intrusion.Server
{
	public class MissionEngine
	{
		private static fields ["_mServerConfig" as IServerConfig, "_mCommonConfig" as ICommonConfig];
	
		#region Handlers
		
		// Gets the mission's squad handler.
		public static property SquadHandler SquadHandler { get; private set; };
		
		#endregion
	
		// Initializes and broadcasts the player info collection
		private static method InitPlayerInfoCollection {
			private ["_playerInfoCollection" as PlayerInfoCollection, "_allPlayers" as Array, "_player" as Object];
			
			_playerInfoCollection = new PlayerInfoCollection;
			_allPlayers = call BIS_fnc_listPlayers;
			
			{
				_player = _x;
				[getPlayerUid _player, side group _player] call _playerInfoCollection.AddPlayerInfo;
			} foreach _allPlayers;
			
			[_playerInfoCollection] call PublicVariableHandler.BroadcastPlayerInfos;
		};

        // Runs the mission.
        private static method Run() {
        	private ["_sideManagers" as Array, "_vehicleSpawner" as VehicleSpawner];
			private ["_messageHandler" as MessageHandler];
        	
        	// Create handlers
        	_messageHandler = new MessageHandler;
        	_self.SquadHandler = new SquadHandler;
        	
        	// Initialize the player info collection
        	call _self.InitPlayerInfoCollection;
        	
        	// Aquire resource collections
        	call ResourceLocationHandler.AquireAllResourceLocations;
        	
        	// Start the mission counter.
        	[_mServerConfig.Gameplay] call MissionCounterService.RunAsync;
        	
        	// Start the weapon service
        	[_mServerConfig.Gameplay, _mCommonConfig.MapMarkers] call WeaponsService.RunAsync;
        	
        	// Start the observation service
        	call ObservationService.RunAsync;
        	
        	// Create a side manager for each side.
        	_sideManagers = [];
    		_vehicleSpawner = [_mServerConfig.VehicleClassNames, _mCommonConfig.MapMarkers] new VehicleSpawner;
        	{
        		_sideManagers pushBack [_mServerConfig, _mCommonConfig, _x, _vehicleSpawner, _self.SquadHandler, _messageHandler] new SideManager;
        	} foreach _mServerConfig.Gameplay.CompetingSides as Side;
        	
        	// Start the free vehicles service
        	[_mServerConfig.Gameplay, _vehicleSpawner] call FreeVehiclesService.RunAsync;
        	
			// Perform the mission digest loop
			while { MissionCounterService.MissionIsRunning } do
			{
				{
					private ["_sideManager" as SideManager];
					_sideManager = _x;
					
					call _sideManager.PerformTurn;
				} foreach _sideManagers as SideManager;
				
				sleep 10;
			};
		};
		
		// Starts the mission
		public static method RunAsync("_serverConfig" as IServerConfig, "_commonConfig" as ICommonConfig)
		{
			_mServerConfig = _serverConfig;
			_mCommonConfig = _commonConfig;
			
			spawn _self.Run; // TODO SQX: Why do we suddenly need a preargument?
		};
	};
};
