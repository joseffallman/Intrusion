/*
 * Name:	ObservationService
 * Date:	2018-10-16
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * A service that reads and broadcasts player's observations.
 */

using Intrusion.Common;
using Intrusion.Communication;

namespace Intrusion.Server
{
	public class ObservationService
	{
		private static fields ["_mObservations" as Array, "_mCurrentId" as Scalar];
		
		// Initializes the observation service.
		public static method Init {
			_mCurrentId = 0;
			_mObservations = [];
		};
		
		// Marks all observations in the observation collection as deleted.
		private static method MarkObservationsAsDeleted {
			{
				_x.MarkedAsDeleted = true;
			} foreach _mObservations as Observation;
		};
		
		// Deletes all observations that are marked as deleted.
		private static method DeleteMarkedObservations {
			private ["_observationsToKeep" as Array];
			
			_observationsToKeep = [];
			
			{
				if (!_x.MarkedAsDeleted) then {
					_observationsToKeep pushBack _x;
				};
			} foreach _mObservations as Observation;
			
			_mObservations = _observationsToKeep;
		};
		
		// Converts the service's list of observations into broadcastable and client optimized map observations.
		// Returns (Array): An array of map observations.
		private static method ConvertToMapObservations {
			private _mapObservations = [];
			
			{
				_mapObservations pushBack (call _x.ToMapObservation);
			} foreach _mObservations as Observation;
			
			_mapObservations
		};
		
		// Gets an eventual already existing observation from the list of observations.
		// Uses different matching techniques to figure out which one it may be.
		// _target (Target): The target used to find the observation.
		// Returns (Observation): The found observation. classNull if observation was not found.
		private static method Observation GetExistingObservation {
			params ["_target" as Target];
			private ["_observation" as Observation];
			
			_observation = classNull;
			
			{
				scopeName "loop";
				
				if (_x.ObservingSide == _target.ObservingSide) then {
					if (group _x.Unit == group _target.Unit) then {
						_observation = _x;
					
						breakOut "loop";
					};
				}
			} foreach _mObservations as Observation;
			
			_observation
		};
		
		// Prioritizes the properties of an observation. All "better" properties of the target will be 
		// set on the observation.
		// _observation (Observation): The observation that will be updated.
		// _target (Target): The target with values
		private static method PrioritizeObservation {
			params ["_observation" as Observation, "_target" as Target];
			
			_observation.MarkedAsDeleted = false;
			
			// Always update the accuracy, percieved position and percieved side.
			_observation.Accuracy = _target.Accuracy;
			_observation.PercievedPos = _target.PercievedPos;
			_observation.PercievedSide = _target.PercievedSide;			
			
			_observation.PercievedProfessionType = ProfessionType.Infantry;
		};
		
		// Adds a target to the list of current observations.
		// _target (Target): The target to add as an observation.
		private static method AddTargetToObservations {
			params ["_target" as Target];
			private ["_existingObservation" as Observation, "_newObservation" as Observation];
			
			_existingObservation = [_target] call _self.GetExistingObservation;
			
			if (isNull _existingObservation) then {
				_mCurrentId = _mCurrentId + 1;
				_newObservation = [_mCurrentId, _target.ObservingSide, getPos _target.Unit, _target.PercievedSide, group _target.Unit, _target.Unit, ProfessionType.Infantry, _target.Accuracy] new Observation;
			
				_mObservations pushBack _newObservation;
			} else {
				[_existingObservation, _target] call _self.PrioritizeObservation;
			};
		};
		
        // Runs the service.
        private static method Run {
        	private ["_targets" as Array, "_mapObservations" as Array];
        	
        	_mCurrentId = 0;
        	
        	while { true } do // The service loop
        	{
        		call _self.MarkObservationsAsDeleted;
        		
	        	// Loop through all units on the map
	        	{
	        		private ["_unit" as Object];
	        		_unit = _x;
	        	
	        		if (alive _unit) then {
		        		_targets = [_unit] call Target.GetEnemyTargets;
		        		
		        		{
		        			[_x] call _self.AddTargetToObservations;
		        		} foreach _targets as Target;
	        		};
	        	} foreach allUnits as Object;
	        	
	        	call _self.DeleteMarkedObservations;

	        	// Broadcast the list of observations
	        	_mapObservations = call _self.ConvertToMapObservations;
				["MapObservationsHandler.UpdateMap", [_mapObservations]] call Remote.Invoke;
	        	
        		sleep 2;
			};
		};
		
		// Starts the service
		public static method RunAsync {
			spawn _self.Run;
		};
	};
};
