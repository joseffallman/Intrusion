/*
 * Name:	Scientist
 * Date:	2017-11-19
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * A class modeling a side's R&D manager refining generated technology (i.e. unlocks new technology).
 */

using Sqx.Collections;
using Intrusion.Common;

namespace Intrusion.Server
{
	public class Scientist : IScientist
	{
		private static fields ["_mSideTechnologies" as Array /* of SideTechnology */];
		private fields ["_mResourceBook" as ResourceBook, "_mTechnologyConfig" as ITechnologyConfig, "_mMessageHandler" as IMessageHandler];
		private fields ["_mInventedTechnologies" as Array /* of Technology (enum) */, "_mSide" as Side];
		private fields ["_mCurrentTechnology" as TechnologyInfo, "_mAllTechnologiesInvented" as Boolean];
		
		public static method Init()
		{
			_mSideTechnologies = [];
		};
		
		// Creates a Sceintist object.
		public constructor("_side" as Side, "_resourceBook" as ResourceBook, "_technologyConfig" as ITechnologyConfig, "_messageHandler" as IMessageHandler, ["_firstTechToResearch" as Technology, 1 as Technology])
		{
			_mSide = _side;
			_mResourceBook = _resourceBook;
			_mTechnologyConfig = _technologyConfig;
			_mMessageHandler = _messageHandler;
			
			_mCurrentTechnology = [_firstTechToResearch] call _mTechnologyConfig.GetTechnology;
			_mInventedTechnologies = [];
			_mAllTechnologiesInvented = false;
		};
		
		// Sets the current technology as invented, notifies players, and starts research on next.
		private method SetTechnologyAsInvented()
		{
			private ["_technology" as Technology];
			
			_mInventedTechnologies pushBack _mCurrentTechnology.Technology;
			_mSideTechnologies pushBack [_mSide, _mCurrentTechnology.Technology] new SideTechnology;
			["Your side has invented '" + _mCurrentTechnology.Name + "'", _mSide] call _mMessageHandler.ShowHint;
			
			// Get next technology to research
			_technology = (_mCurrentTechnology.Technology as Scalar) + 1 as Technology;

			if (_technology == Technology.EndOfTechnologies) then {
				_mAllTechnologiesInvented = true;
			}
			else {
				_mCurrentTechnology = [_technology] call _mTechnologyConfig.GetTechnology;
			};
		};
		
		// Performs research and development, and notifies players when different technology progress steps are achieved.
		public method PerformResearch()
		{
			if (!_mAllTechnologiesInvented) then {
				if (_mResourceBook.TotalResearch >= _mCurrentTechnology.RequiredResearch) then {
					call _self.SetTechnologyAsInvented;
				};
			};
		};

		// Gets whether a technology is invented yet or not.
		public method Boolean TechnologyIsInvented("_technology" as Technology)
		{
			_technology in _mInventedTechnologies
		};
		
		public static method Boolean SideTechnologyIsInvented("_side" as Side, "_technology" as Technology)
		{
			scopeName "main";
			
			if (_technology == Technology.None) then {
				true breakOut "main";
			}
			else {
				{
					private ["_sideTech" as SideTechnology];
					_sideTech = _x;
					
					if (_sideTech.Side == _side && _sideTech.Technology == _technology) then {
						true breakOut "main";
					};
				} foreach _mSideTechnologies as SideTechnology;
			};
			
			false
		};
	};
};
