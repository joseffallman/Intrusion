/*
 * Name:	ResourceCollector
 * Date:	2017-11-18
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * A side manager that collects all generated resources into the side's resource book.
 */
namespace Intrusion.Server
{
	public class ResourceCollector
	{
		private fields ["_mGameplayConfig" as IGameplayConfig, "_mResourceBook" as ResourceBook];
		private fields ["_mLastAquireTime" as Scalar, "_mSecondsSinceLastAquire" as Scalar];
	
		// Creates a ResourceCollector object.
		public constructor("_gameplayConfig" as IGameplayConfig, "_side" as Side, "_resourceBook" as ResourceBook) {
			_mGameplayConfig = _gameplayConfig;
			_self.Side = _side;
			_mResourceBook = _resourceBook;
			
			_mLastAquireTime = time;
			_mSecondsSinceLastAquire = 0;
		};
		
		// Gets the side of the resource manager.
		public property Side Side { get; private set; };
		
		// Calculates how much production has been generated since last aquire.
		// Returns (Scalar): Amount of production.
		private method Scalar AquireProduction {
			private _pointsPerFacility = (_mGameplayConfig.TotalProduction / ResourceLocationHandler.FactoryLocationsCount) * (_mSecondsSinceLastAquire / (_mGameplayConfig.MatchLengthMinutes * 60));
			private _neutralCount = [civilian] call ResourceLocationHandler.GetFactoriesCountBySide;
			private _ourCount = [_self.Side] call ResourceLocationHandler.GetFactoriesCountBySide;
			
			private _points = _pointsPerFacility * (_ourCount + (_neutralCount / 2));
			
			_points
		};
		
		// Calculates how much technology has been generated since last aquire.
		// Returns (Scalar): Amount of technology.
		private method Scalar AquireTechnology {
			private _pointsPerFacility = (_mGameplayConfig.TotalResearch / ResourceLocationHandler.TechLabLocationsCount) * (_mSecondsSinceLastAquire / (_mGameplayConfig.MatchLengthMinutes * 60));
			private _neutralCount = [civilian] call ResourceLocationHandler.GetTechLabsCountBySide;
			private _ourCount = [_self.Side] call ResourceLocationHandler.GetTechLabsCountBySide;
			
			private _points = _pointsPerFacility * (_ourCount + (_neutralCount / 2));
			
			_points
		};
		
		// Aquires map resources and makes deposits to the resource book.
		public method CollectResources {
			private ["_production" as Scalar, "_technology" as Scalar];
			
			_mSecondsSinceLastAquire = time - _mLastAquireTime;
			
			_production = call _self.AquireProduction;
			_technology = call _self.AquireTechnology;
			
			[_production] call _mResourceBook.DepositProduction;
			[_technology] call _mResourceBook.DepositResearch;
			
			_mLastAquireTime = time;
		};
	};
};
