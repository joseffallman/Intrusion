/*
 * Name:	ProductionQueue
 * Date:	2017-11-19
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * A queue for the groups on the side to get needed materiels as soon as the side can afford it.
 */

using Sqx.Collections;

namespace Intrusion.Server
{
	public class OrderQueue
	{
		private fields ["_mOrders" as Array /* of Order */];
		
		// Creates a ProductionQueue object.
		public constructor {
			_mOrders = [];
			_self.CurrentOrder = classNull;
		};
		
		public method Array GetOrders {
			+_mOrders
		};
		
		// Removes all orders that belong to a certain group
		// _group (Group): The group's orders that will be removed.
		public method Boolean RemoveOrdersByGroup("_group" as Group)
		{
			private ["_ordersToKeep" as Array];
			
			_ordersToKeep = [];
			
			{
				if (_x.Group != _group) then {
					_ordersToKeep pushBack _x;
				};
			} foreach _mOrders as Order;
			
			_mOrders = _ordersToKeep;
		};
		
		// Gets the group currently being built for.
		public property Order CurrentOrder { get; private set; };
		
		// Adds a group to the queue if it is not already in it.
		// _group (Group): The group to add.
		public method PutOrder("_order" as Order)
		{
			_mOrders pushBack _order;
			
			if (count _mOrders == 1) then {
				_self.CurrentOrder = _order;
			};
		};
		
		// Removes the current order and moves the queue pointer to the next group in the queue.
		// Returns (Group): The group that is the current group after the pointer has moved.
		public method RemoveCurrentOrder
		{
			private ["_currentOrder" as Order];
			
			// Delete the group
			_mOrders = [_mOrders, 0] call ArrayHandler.RemoveItemAtIndex;
			
			if (count _mOrders == 0) then {
				_currentOrder = classNull;
			}
			else {
				_currentOrder = _mOrders select 0;
			};
			
			while { count _mOrders > 0 && { isNull _currentOrder.Group || { count units _currentOrder.Group == 0 }}} do
			{
				_mOrders = [_mOrders, 0] call ArrayHandler.RemoveItemAtIndex;
				
				if (count _mOrders == 0) then {
					_currentOrder = classNull;
				}
				else {
					_currentOrder = _mOrders select 0;
				};
			};
			
			_self.CurrentOrder = _currentOrder;
		};
		
		// Gets the number of orders currently in the queue.
		// Returns (Scalar): Number of orders in the queue.
		public method Scalar Count {
			count _mOrders
		};
		
		// Moves the current order last.
		public method MoveCurrentOrderLast()
		{
			private ["_order" as Order];
			
			if (count _mOrders > 0) then {
				_order = _mOrders select 0;
				_mOrders = [_mOrders, 0] call ArrayHandler.RemoveItemAtIndex;
				_mOrders pushBack _order;
				_order = _mOrders select 0;
				_self.CurrentOrder = _order;
				//_self.CurrentOrder = (_mOrders select 0); // TODO SQX: Compiler adds a semicolon too much.
			};
		};
	};
};
