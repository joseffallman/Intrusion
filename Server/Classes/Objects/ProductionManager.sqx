/*
 * Name:	ProductionManager
 * Date:	2017-11-19
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * A class modeling a side's production manager, refining generated production (i.e. spawns new
 * vehicles and weapons).
 */

using Intrusion.Common;
using Intrusion.Communication;

namespace Intrusion.Server
{
	public class ProductionManager : IGroupChangingProfessionListener
	{
		private fields ["_mProfessionVehiclesConfig" as IProfessionVehiclesConfig, "_mVehicleClassNamesConfig" as IVehicleClassNamesConfig, "_mVehicleSpawner" as IVehicleSpawner, "_mResourceBook" as ResourceBook, "_mReservationQueue" as ReservationQueue, "_mSquadHandler" as ISquadHandler, "_mScientist" as IScientist, "_mMessageHandler" as IMessageHandler, "_mProfessionConfig" as IProfessionConfig];

		// Creates a ProductionManager object.
		public constructor("_professionVehiclesConfig" as IProfessionVehiclesConfig, "_vehicleClassNamesConfig" as IVehicleClassNamesConfig, "_side" as Side, "_vehicleSpawner" as IVehicleSpawner, "_resourceBook" as ResourceBook, "_squadHandler" as ISquadHandler, "_scientist" as IScientist, "_messageHandler" as IMessageHandler, "_professionConfig" as IProfessionConfig, ["_reservationQueue" as ReservationQueue, classNull])
		{
			_mProfessionVehiclesConfig = _professionVehiclesConfig;
			_mVehicleClassNamesConfig = _vehicleClassNamesConfig;
			_self.Side = _side;
			_mVehicleSpawner = _vehicleSpawner;
			_mSquadHandler = _squadHandler;
			_mResourceBook = _resourceBook;
			_mScientist = _scientist;
			_mMessageHandler = _messageHandler;
			_mProfessionConfig = _professionConfig;
			
			_mReservationQueue = _reservationQueue;
			
			// If reservationQueue is null, then we are in production mode (not in unit testing)
			if (isNull _mReservationQueue) then {
				_mReservationQueue = new ReservationQueue;
			
				// Register the class to the global group handler to recieve notifications 
				// when groups on the side is changing its profession.
				[_self] call SquadHandler.RegisterGroupChangingProfessionListener;
			};
		};
		
		// Gets the production manager's side.
		public property Side Side { get; private set; };
		
		// Creates a vehicle reservation for a group
		// _group (Group): The group to create reservation for.
		// _professionType (ProfessionType): The profession type.
		private method CreateReservation("_group" as Group, "_professionType" as ProfessionType)
		{
			private ["_reservation" as Reservation, "_vehicleClassNamesInfo" as ProVehicleClassNamesInfo, "_vehicleClassName" as String, "_professionVehicle" as ProfessionVehicleInfo];

			// Remove the group's eventual existing reservations.
			[_group] call _mReservationQueue.RemoveReservationsByGroup;
			
			_vehicleClassNamesInfo = [side _group, _professionType] call _mVehicleClassNamesConfig.GetProVehiclesClassNameInfo;
			//_vehicleClassNames = [side _group, _professionType] call VehicleClassNamesConfig.GetProVehiclesClassNames; // TODO SQX (TEST ADDED): Must generate error that VehicleClassNamesConfig is not static.

			// Create an reservation if there is a vehicle to assign.
			if (!isNull _vehicleClassNamesInfo) then {
				_vehicleClassName = selectRandom _vehicleClassNamesInfo.ClassNames;
				_professionVehicle = [_professionType] call _mProfessionVehiclesConfig.GetVehicle;
				
				_reservation = [_group, _vehicleClassName, _professionVehicle.Cost] new Reservation;
				[_reservation] call _mReservationQueue.PutReservation;
				
				if (call _mReservationQueue.Count == 1) then {
					[_mReservationQueue.CurrentReservation.Group] call _self.TellSquadVehicleSoonDelivered;
				};
			};
		};
		
		// Called when a group on the production manager's side changes its profession.
		// _group (Group): The group that is changing its profession.
		// _professionType (ProfessionType): The group's new profession type.
		public method OnGroupChangingProfession("_group" as Group, "_professionType" as ProfessionType)
		{
			private ["_cost" as Scalar];
			
			// Delete the group's eventual existing vehicle and return its production value.
			_cost = [_group] call _mVehicleSpawner.DeleteProfessionVehicles;
			[_cost] call _mResourceBook.DepositProduction;
			
			[_group, _professionType] call _self.CreateReservation;
		};
		
		private method TellSquadVehicleSoonDelivered("_group" as Group)
		{
			["Your squad's vehicle is in the production queue and will soon be delivered.", _group] call _mMessageHandler.ShowMessage;
		};
		
		public method AddReservationsForSquadsWithNoVehicle()
		{
			private ["_intrusionVehicles" as Array /* of IntrusionVehicle */];
			private ["_squadCollection" as SquadCollection, "_squad" as Squad, "_reservation" as Reservation];
			
			call _mVehicleSpawner.RemoveOwnershipOfDestroyedVehicles;
			
			_squadCollection = call PublicVariableHandler.GetSquads;
			
			{
				_squad = _x;

				if (side _squad.Group == _self.Side) then {
					_reservation = [_squad.Group] call _mReservationQueue.GetReservationByGroup;
					
					if (isNull _reservation) then {
						_intrusionVehicles = [_squad.Group] call _mVehicleSpawner.GetIntrusionVehiclesByGroup;
		
						if (count _intrusionVehicles == 0) then {
							[_squad.Group, _squad.ProfessionType] call _self.CreateReservation;
						};
					};
				};
			} foreach _squadCollection.Squads as Squad;
		};
		
		// Produces vehicles from the production queue.
		public method PerformProduction {
			private ["_tryOneMore" as Boolean, "_squad" as Squad, "_technologyInvented" as Boolean];
			private ["_profession" as Profession, "_vehiclesCount" as Scalar];

			["_mReservationQueue: " + str _mReservationQueue] call LogHandler.Debug;
							
			_tryOneMore = true;

			while { _tryOneMore && {!isNull _mReservationQueue.CurrentReservation} } do {
				private _totalProduction = _mResourceBook.TotalProduction;
				private _cost = _mReservationQueue.CurrentReservation.ProductionCost;
				
				_tryOneMore = false;
				_squad = [_mReservationQueue.CurrentReservation.Group] call _mSquadHandler.GetSquadByGroup;
				
				if (!isNull _squad) then {
					_profession = [_squad.ProfessionType] call _mProfessionConfig.GetProfession;
					_technologyInvented = [_profession.RequiredTechnology] call _mScientist.TechnologyIsInvented;

					if (!_technologyInvented) then {
						call _mReservationQueue.MoveCurrentReservationLast;
					}
					else {
						if (_profession.MaxUnitsPerVehicle <= 0) then {
							_vehiclesCount = 1;
						}
						else {
							_vehiclesCount = ceil ((count units _squad.Group) / (_profession.MaxUnitsPerVehicle));
						};
	
						if (_totalProduction >= _cost * _vehiclesCount && _technologyInvented) then
						{
							// Create the vehicle(s)
							for "_i" from 1 to _vehiclesCount do
							{
								[_squad.Group, _squad.ProfessionType, _mReservationQueue.CurrentReservation.VehicleClassName, _cost] call _mVehicleSpawner.SpawnProfessionVehicle;
								[_cost] call _mResourceBook.WithdrawProduction;
							};

							// Tell the group
							["Your squad's vehicle is ready and waiting for you at the base.", _mReservationQueue.CurrentReservation.Group] call _mMessageHandler.ShowMessage;
							
							// Remove the reservation
							call _mReservationQueue.RemoveCurrentReservation;

							// Tell the next squad that their vehicle is being produced.
							if (call _mReservationQueue.Count > 0) then {
								[_mReservationQueue.CurrentReservation.Group] call _self.TellSquadVehicleSoonDelivered;
							};
							
							_tryOneMore = true;
						};
					};
				};
			};
		};
	};
};
