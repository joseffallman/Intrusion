/*
 * Name:	OrderQueueTests
 * Date:	2018-11-19
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Tests for the OrderQueue object.
 */

using Sqx.UnitTest;
using Intrusion.Server;
using Intrusion.Tests.Helpers;

namespace Intrusion.Tests.Server
{
	public class OrderQueueTests
	{
		// Creates a OrderQueueTests object.
		public static method Init {
			["Tests.Server", "OrderQueueTests", [
				"OrderQueueEmpty_NothingChanged_CurrentIsNull",
				"OrderQueueEmpty_OrderAdded_SetAsCurrent",
				"OrderQueueEmpty_TwoOrdersAdded_FirstIsCurrent",
				"TwoOrders_NextOrderSelected_SecondIsCurrent",
				"TwoOrdersButNoUnitsInGroups_NextOrderSelected_CurrentIsNull",
				"ThreeOrders_RemoveCurrentTwoTimes_ThirdIsCurrent",
				"ThreeOrders_SecondIsEmpty_SecondIsRemoved",
				"TwoOrdersInQueue_FirstOrderMovedLast_CurrentOrderChanged"
			]] call TestEngine.Register;
		};
		
		private static fields ["_mOrderQueue" as OrderQueue];
		
		private static method BeforeEach {
			_mOrderQueue = new OrderQueue;
		};
		
		private static method OrderQueueEmpty_NothingChanged_CurrentIsNull {
			// Arrange
			
			// Act
			
			// Assert
			[_mOrderQueue.CurrentOrder, "Current order should be null."] call Assert.IsNull;
			[0, call _mOrderQueue.Count, "Wrong number of orders in the queue."] call Assert.AreEqual;
		};

		private static method OrderQueueEmpty_OrderAdded_SetAsCurrent {
			private ["_order" as Order, "_group" as Group];
		
			// Arrange
			_group = createGroup west;
			_order = [_group, "", 0] new Order;
			
			// Act
			[_order] call _mOrderQueue.PutOrder;
			
			// Assert
			[_group, _mOrderQueue.CurrentOrder.Group, "Added order does not match current order."] call Assert.AreEqual;
			[1, call _mOrderQueue.Count, "Wrong number of orders in the queue."] call Assert.AreEqual;
						
			// Cleanup
			deleteGroup _group;
		};

		private static method OrderQueueEmpty_TwoOrdersAdded_FirstIsCurrent {
			private ["_order1" as Order, "_order2" as Order];
		
			// Arrange
			_order1 = [createGroup west, "", 0] new Order;
			_order2 = [createGroup west, "", 0] new Order;
			
			// Act
			[_order1] call _mOrderQueue.PutOrder;
			[_order2] call _mOrderQueue.PutOrder;
			
			// Assert
			[_order1.Group, _mOrderQueue.CurrentOrder.Group, "Wrong order is the current."] call Assert.AreEqual;
			[2, call _mOrderQueue.Count, "Wrong number of orders in the queue."] call Assert.AreEqual;
			
			// Cleanup
			deleteGroup _order1.Group;
			deleteGroup _order2.Group;
		};

		private static method TwoOrders_NextOrderSelected_SecondIsCurrent {
			private ["_order1" as Order, "_order2" as Order];
			private ["_group1" as Group, "_group2" as Group];
		
			// Arrange
			_group1 = createGroup west;
			_group2 = createGroup west;
			"B_Soldier_F" createUnit [[0,0,100], _group1];
			"B_Soldier_F" createUnit [[0,0,100], _group2];
			
			_order1 = [_group1, "", 0] new Order;
			_order2 = [_group2, "", 0] new Order;
			
			[_order1] call _mOrderQueue.PutOrder;
			[_order2] call _mOrderQueue.PutOrder;
			
			// Act
			call _mOrderQueue.RemoveCurrentOrder;
			
			// Assert
			[_order2.Group, _mOrderQueue.CurrentOrder.Group, "Wrong order is the current."] call Assert.AreEqual;
			[1, call _mOrderQueue.Count, "Wrong number of orders in the queue."] call Assert.AreEqual;
			
			// Cleanup
			deleteVehicle (units _order1.Group select 1);
			deleteVehicle (units _order2.Group select 1);
			deleteGroup _group1;
			deleteGroup _group2;
		};
		
		private static method TwoOrdersButNoUnitsInGroups_NextOrderSelected_CurrentIsNull {
			private ["_order1" as Order, "_order2" as Order];
			private ["_group1" as Group, "_group2" as Group];
		
			// Arrange
			_group1 = createGroup west;
			_group2 = createGroup west;
			
			_order1 = [_group1, "", 0] new Order;
			_order2 = [_group2, "", 0] new Order;
			
			[_order1] call _mOrderQueue.PutOrder;
			[_order2] call _mOrderQueue.PutOrder;
			
			// Act
			call _mOrderQueue.RemoveCurrentOrder;
			
			// Assert
			[0, call _mOrderQueue.Count, "Wrong number of orders in the queue."] call Assert.AreEqual;
			[_mOrderQueue.CurrentOrder, "All orders should be gone."] call Assert.IsNull;
			
			// Cleanup
			deleteGroup _group1;
			deleteGroup _group2;
		};
		
		private static method ThreeOrders_RemoveCurrentTwoTimes_ThirdIsCurrent {
			private ["_order1" as Order, "_order2" as Order, "_order3" as Order];
			private ["_group1" as Group, "_group2" as Group, "_group3" as Group];
		
			// Arrange
			_group1 = createGroup west;
			_group2 = createGroup west;
			_group3 = createGroup west;
			"B_Soldier_F" createUnit [[0,0,100], _group1];
			"B_Soldier_F" createUnit [[0,0,100], _group2];
			"B_Soldier_F" createUnit [[0,0,100], _group3];
			
			_order1 = [_group1, "", 0] new Order;
			_order2 = [_group2, "", 0] new Order;
			_order3 = [_group3, "", 0] new Order;
			
			[_order1] call _mOrderQueue.PutOrder;
			[_order2] call _mOrderQueue.PutOrder;
			[_order3] call _mOrderQueue.PutOrder;
			
			// Act
			call _mOrderQueue.RemoveCurrentOrder;
			call _mOrderQueue.RemoveCurrentOrder;
			
			// Assert
			[_order3.Group, _mOrderQueue.CurrentOrder.Group, "Wrong order is the current."] call Assert.AreEqual;
			[1, call _mOrderQueue.Count, "Wrong number of orders in the queue."] call Assert.AreEqual;
			
			// Cleanup
			deleteVehicle (units _group1 select 1);
			deleteVehicle (units _group2 select 1);
			deleteVehicle (units _group3 select 1);
			deleteGroup _group1;
			deleteGroup _group2;
			deleteGroup _group3;
		};
		
		private static method ThreeOrders_SecondIsEmpty_SecondIsRemoved {
			private ["_order1" as Order, "_order2" as Order, "_order3" as Order];
			private ["_group1" as Group, "_group2" as Group, "_group3" as Group];
		
			// Arrange
			_group1 = createGroup west;
			_group2 = createGroup west;
			_group3 = createGroup west;
			"B_Soldier_F" createUnit [[0,0,100], _group1];
			"B_Soldier_F" createUnit [[0,0,100], _group3];
			
			_order1 = [_group1, "", 0] new Order;
			_order2 = [_group2, "", 0] new Order;
			_order3 = [_group3, "", 0] new Order;
			
			[_order1] call _mOrderQueue.PutOrder;
			[_order2] call _mOrderQueue.PutOrder;
			[_order3] call _mOrderQueue.PutOrder;
			
			// Act
			call _mOrderQueue.RemoveCurrentOrder;
			
			// Assert
			[_order3.Group, _mOrderQueue.CurrentOrder.Group, "Wrong order is the current."] call Assert.AreEqual;
			[1, call _mOrderQueue.Count, "Wrong number of orders in the queue."] call Assert.AreEqual;
			
			// Cleanup
			deleteVehicle (units _group1 select 1);
			deleteVehicle (units _group3 select 1);
			deleteGroup _group1;
			deleteGroup _group2;
			deleteGroup _group3;
		};
		
		private static method TwoOrdersInQueue_FirstOrderMovedLast_CurrentOrderChanged {
			private ["_order1" as Order, "_order2" as Order];
			private ["_group1" as Group, "_group2" as Group];
		
			// Arrange
			_group1 = [1] call TestActions.CreatePopulatedGroup;
			_group2 = [1] call TestActions.CreatePopulatedGroup;
			
			_order1 = [_group1, "CAR", 100] new Order;
			_order2 = [_group2, "BUS", 200] new Order;
			
			[_order1] call _mOrderQueue.PutOrder;
			[_order2] call _mOrderQueue.PutOrder;
			
			// Act
			call _mOrderQueue.MoveCurrentOrderLast;
			
			// Assert
			[2, call _mOrderQueue.Count, "Wrong number of orders in the queue."] call Assert.AreEqual;
			[_group2, _mOrderQueue.CurrentOrder.Group, "Second order should now be current."] call Assert.AreEqual;
			_order2 = (call _mOrderQueue.GetOrders) select 1;
			[_group1, _order2.Group, "First order should now be second."] call Assert.AreEqual;
			
			// Cleanup
			[_group1] call TestActions.DeletePopulatedGroup;
			[_group2] call TestActions.DeletePopulatedGroup;
		};
	};
};
